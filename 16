class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if not nums or len(nums) == 0:
            return target
        nums = sorted(nums)
        delta = nums[0] + nums[1] + nums[2] - target
        for i in range(0, len(nums)-2):
            start = i+1
            end = len(nums) -1
            while start < end:
                newdelta = nums[i] + nums[start] + nums[end] - target
                if newdelta == 0:
                    return target
                if abs(delta) > abs(newdelta):
                    delta = newdelta
                if newdelta < 0:
                    start += 1
                else:
                    end -= 1
        return target + delta
        


class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int a = 0;
        int min = -1;
        int result = -1;
        //int b, c, d;
        for(int i=0; i <nums.size()-2;i++){
            for(int j = i+1; j < nums.size()-1; j++){
                for(int k = j+1; k< nums.size(); k++){
                    a = abs(nums[i]+nums[j]+nums[k]-target);
                    //cout<<a<<endl;
                    if(min == -1){
                        min = a;
                        result = nums[i]+nums[j]+nums[k];
                    }else{
                        if(min>a){
                            min = a;
                            result = nums[i]+nums[j]+nums[k];
                        }
                    }
                }
            }
            
            //cout<<result<<endl;
        }
        return result;
    }
};




class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int delta = nums[0] + nums[1] + nums[2] - target;
        for(int i = 0; i < nums.size()-2; i++){
            int low = i+1;
            int high = nums.size() -1;
            while(low < high){
                int newDelta = nums[low] + nums[high] + nums[i] - target;
                if (newDelta == 0)
                    return target;
                if(abs(delta) >abs(newDelta))
                    delta = newDelta;
                if(newDelta<0)
                    low += 1;
                else
                    high -= 1;
                
            }
            
            
        }
        return target + delta;
    }
};



