class Solution(object):
    
    
    def  __init__(self):
        self.longestSize = 0
        self.longestStart = 0 
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        for index, value in enumerate(s):
            self.checkOddPalindrome(s, index)
            self.checkEvenPalindrome(s, index)
        return s[self.longestStart:self.longestSize+self.longestStart+1]
    def checkOddPalindrome(self, s, index):
        start = index
        end = index
        while start >= 1 and end < len(s)-1 and s[start-1] == s[end+1]:
            start -= 1
            end += 1
        if end-start > self.longestSize:
            self.longestSize = end - start
            self.longestStart = start
    def checkEvenPalindrome(self, s, index):
        start = index
        end = index+1
        if end <= len(s)-1:
            while start >= 1 and end < len(s) - 1 and s[start-1] == s[end+1] and s[start] == s[end]:
                start -= 1
                end += 1
            if end- start > self.longestSize and s[start] == s[end]:
                self.longestSize = end-start
                self.longestStart = start
     
     
     
     
     
     
 class Solution:
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        self.b = ""
    
        for i in range(len(s)):
            self.check_odd(i, s)
            self.check_even(i, s)
        return self.b
    
    
    def check_odd(self, i, s):
        start = i
        end = i
        while start >=1  and end < len(s)-1 and s[start -1] == s[end+1]:
            start -= 1
            end += 1
        if len(s[start:end+1]) > len(self.b):
            self.b = s[start:end+1] 
    def check_even(self, i, s):
        start = i
        end = i + 1
        while start >= 1 and end < len(s) - 1 and s[start] == s[end] and s[start -1] == s[end+1]:
            start -= 1
            end += 1
        if len(s[start:end+1]) > len(self.b) and s[start] == s[end]:
            self.b = s[start:end +1]



string longestPalindrome(string s) {
    
    int len=s.size();        
    
        if (len < 2) return s;
    
        int i, start=0, maxlen=1;
        int low, high;

        for(i=1; i<len; i++) {

            //  start checking for even length

            low=i-1; high=i;

            while(low >= 0 && high < len && s[low] == s[high]) {

                if(high-low+1 > maxlen) {   //  a new longer palindrome found
                    start = low;
                    maxlen = high-low+1;
                }

                low--; high++;
            }

            //  start checking for odd length

            low=i-1; high=i+1;

            while(low >= 0 && high < len && s[low] == s[high]) {

                if(high-low+1 > maxlen) {   //  a new longer palindrome found
                    start = low;
                    maxlen = high-low+1;
                }

                low--; high++;
        }
        }

        return (s.substr(start, maxlen)); 
