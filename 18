class Solution(object):
    
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        res = []
        if len(nums)<4:
            return res
        nums = sorted(nums)
        for i in range(len(nums)-3):
            if i > 0 and nums[i] == nums[i-1]:continue
            for j in range(i+1, len(nums)-2):
                if j> i+1 and nums[j] == nums[j-1]:continue
                    
                left = j+1
                right = len(nums)-1
                while left < right:
                    sum = nums[left] + nums[right] + nums[i] + nums[j]
                    if sum == target:
                        res.append([nums[i], nums[j], nums[left], nums[right]])
                        
                        while left<right and nums[left] == nums[left +1]:
                            left +=1
                        while left < right and nums[right] == nums[right-1]:
                            right -=1
                        left += 1
                        right -=1
                    
                    elif sum < target:
                        left +=1
                    else:
                        right -=1
        return res

        



class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& num, int target) {
        int len = num.size();
        int left, right, sum;
        sort(num.begin(), num.end());
        vector<vector<int>> res;
        for (int i = 0; i < len -3; ++i){
            if (i && num[i] == num[i-1]){
                continue;
            }
            for (int j = i + 1; j < len -2; ++j){
                if (j != i + 1 && num[j] == num[j-1]){
                    continue;
                }
                sum = target - num[i] - num[j];
                left = j + 1, right = len - 1;
                while (left < right) {
                    if(num[left] + num[right] == sum){
                        res.push_back({num[i], num[j], num[left], num[right]});
                        ++left, --right;
                        while (left < right && num[left] == num[left -1]){
                            ++left;
                        }
                        while (left <right && num[right] == num[right + 1]){
                            --right;
                        }
                    }else{
                        if(num[left] + num[right] > sum){
                            --right;
                        }else{
                            ++left;
                        }
                    }
                }
            }
        }
        return res;
    }
};


