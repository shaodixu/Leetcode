class Solution(object):
    def letterCombinations(self, string):
        """
        :type digits: str
        :rtype: List[str]
        """
        if not string:
            return []
        self.dict = {"2":"abc",
                    "3":"def",
                    "4":"ghi",
                    "5":"jkl",
                    "6":"mno",
                    "7":"pqrs",
                    "8":"tuv",
                    "9":"wxyz"}
        self.res = []
        
        def dfs(string, index, temp):
            if len(temp) == len(string):
                self.res.append("".join(x for x in temp))
                return
            for char in self.dict[string[index]]:
                temp.append(char)
                dfs(string, index+1, temp)
                temp.pop()
        
                
        dfs(string, 0, [])
        return self.res
 
 
 class Solution:
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        self.res = []
        self.letterMap = [" ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"]
        if digits =="":
            return self.res
        
        self.findCombination(digits, 0, "")
        return self.res
        
        
    def findCombination(self, digits, index, s):
        if index == len(digits):
            self.res.append(s)
            return 
            
        c = digits[index]
        letters = self.letterMap[int(c)]
        for i in range(len(letters)):
            self.findCombination(digits, index + 1,s+letters[i])
        return 
        
  


class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.size()==0) return res;
        string local;
        vector<vector<char>> table(2,vector<char>());
        table.push_back(vector<char>{'a','b','c'}); // index 2
        table.push_back(vector<char>{'d','e','f'}); // 3
        table.push_back(vector<char>{'g','h','i'});
        table.push_back(vector<char>{'j','k','l'}); // 5
        table.push_back(vector<char>{'m','n','o'});
        table.push_back(vector<char>{'p','q','r','s'}); // 7
        table.push_back(vector<char>{'t','u','v'});
        table.push_back(vector<char>{'w','x','y','z'}); // 9
        
        backtracking(table,res,local,0,digits);
        return res;
        
        
    }
    void backtracking(const vector<vector<char>>& table, vector<string>& res, string& local, int index, const string& digits){
        if(index == digits.size())
            res.push_back(local);
        else
            for(int i = 0;i < table[digits[index] - '0'].size();i++){
                local.push_back(table[digits[index]-'0'][i]);
                backtracking(table, res, local, index +1, digits);
                local.pop_back();
            }
    }
    
};



