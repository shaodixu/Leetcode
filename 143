# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param head, a ListNode
    # @return nothing
    def reorderList(self, head):
        
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
        if not head:
            return
        # split
        fast = slow = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        head1, head2 = head, slow.next
        slow.next = None
        # reverse
        cur, pre = head2, None
        while cur:
            nex = cur.next
            cur.next = pre
            pre = cur
            cur = nex
        # merge
        cur1, cur2 = head1, pre
        while cur2:
            nex1, nex2 = cur1.next, cur2.next
            cur1.next = cur2
            cur2.next = nex1
            cur1, cur2 = nex1, nex2
        
        
        
#         if not head: return 
#         mid = self.findMid(head)
#         l2 = mid.next
#         mid.next = None
#         l2 = self.reverse(l2)
#         l1 = head
#         while l1 and l2:
#             next = l1.next
#             l2 = l2.next
#             l1.next.next = next
#             l1 = next
    
    
    
    
#     def findMid(self, head):
#         fast = head
#         slow = head
#         while fast and fast.next:
#             fast = fast.next.next
#             slow = slow.next
#         return slow
    
#     def reverse(self, head):
#         newHead = None
#         while head:
#             next = head.next
#             head.next = newHead
#             newHead = head
#             head = next
#         return newHead
