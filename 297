import Queue
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return ""
        res = []
        q = Queue.Queue()
        q.put(root)
        while(not q.empty()):
            cur = q.get()
            if not cur:
                res.append("null")
                continue
            res.append(str(cur.val))
            q.put(cur.left)
            q.put(cur.right)
        return ','.join(res)
        
                

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if data == "":
            return None
        q = Queue.Queue()
        vals = data.split(',')
        root = TreeNode(int(vals[0]))
        q.put(root)
        for i in range(1, len(vals) - 1, 2):
            parent = q.get()
            if(vals[i] != 'null'):
                parent.left = TreeNode(int(vals[i]))
                
                q.put(parent.left)
            if(vals[i + 1] != 'null'):
                parent.right = TreeNode(int(vals[i + 1]))
                
                q.put(parent.right)
        return root
