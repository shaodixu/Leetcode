class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.res = []
        def dfs(nums, temp):
            if len(temp) == len(nums):
                self.res.append(temp[:])
            for i in range(len(nums)):
                if nums[i] in temp:
                    continue
                temp.append(nums[i])
                dfs(nums, temp)
                temp.pop()
        dfs(nums, [])
        return self.res



class Solution:
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.res = []
        self.used = [False for i in range(len(nums))]
        if len(nums) == 0:
            return self.res
        p = []
        self.generatePermutation(nums, 0, p)
        return self.res
    
    
    def generatePermutation(self, nums, index, p):
        if index == len(nums):
            self.res.append(p[:])
            return 
        
        for i in range(len(nums)):
            if self.used[i] ==False:
                p.append(nums[i])
                self.used[i] = True
                self.generatePermutation(nums, index + 1, p)
                p.pop()
                self.used[i] = False
        return 
 



class Solution {
private:
    vector<vector<int>> res;
    vector<bool> used;
    void generatePermutation(const vector<int>& nums, int index, vector<int>& p){
        if(index == nums.size()){
            res.push_back(p);
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            if(!used[i]){
                used[i] = true;
                p.push_back(nums[i]);
                generatePermutation(nums, index + 1, p); 
                used[i] = false;
                p.pop_back();
            }
            
            
        }
        return;
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        res.clear();
        if(nums.size() == 0)
            return res;

        used = vector<bool>(nums.size(), false);
        vector<int> p;
        generatePermutation(nums, 0, p);

        return res;
        
    }
};
