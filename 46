class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.res = []
        def dfs(nums, temp):
            if len(temp) == len(nums):
                self.res.append(temp[:])
            for i in range(len(nums)):
                if nums[i] in temp:
                    continue
                temp.append(nums[i])
                dfs(nums, temp)
                temp.pop()
        dfs(nums, [])
        return self.res



class Solution:
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.res = []
        self.used = [False for i in range(len(nums))]
        if len(nums) == 0:
            return self.res
        p = []
        self.generatePermutation(nums, 0, p)
        return self.res
    
    
    def generatePermutation(self, nums, index, p):
        if index == len(nums):
            self.res.append(p[:])
            return 
        
        for i in range(len(nums)):
            if self.used[i] ==False:
                p.append(nums[i])
                self.used[i] = True
                self.generatePermutation(nums, index + 1, p)
                p.pop()
                self.used[i] = False
        return 
 


