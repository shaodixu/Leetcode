#solution1
class Solution(object):
    def longestWord(self, words):
        """
        :type words: List[str]
        :rtype: str
        """
        wset = set([''])
        ans = ''
        for word in sorted(words):
            if word[:-1] in wset:
                wset.add(word)
                if len(word) > len(ans):
                    ans = word
        return ans
    
#solution2 trie 
    
# class Solution(object):
#     def longestWord(self, words):
#         Trie = lambda: collections.defaultdict(Trie)
#         trie = Trie()
#         END = True

#         for i, word in enumerate(words):
#             reduce(dict.__getitem__, word, trie)[END] = i

#         stack = trie.values()
#         ans = ""
#         while stack:
#             cur = stack.pop()
#             if END in cur:
#                 word = words[cur[END]]
#                 if len(word) > len(ans) or len(word) == len(ans) and word < ans:
#                     ans = word
#                 stack.extend([cur[letter] for letter in cur if letter != END])

#         return ans
