binary search:

template<typename T>;
int binarySearch(T arr[], int n, T target){
    int l = 0;
    int r = n-1;
    while(l<=r){
        int mid = (l+r)/2;
        if(arr[mid] == target)
            return mid;
        if(target > arr[mid])
            l = mid + 1;
        else
            r = mid - 1;
    }
     return -1;
}
        

278

class Solution:
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """
        left = 1
        right = n
        
        while left <= right:
            mid = (left + right) //2
            if isBadVersion(mid) is True:
                right = mid-1
            elif isBadVersion(mid) is False:
                left = mid + 1
        
        return left 

374
class Solution(object):
    def guessNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        left = 1
        right = n
        while left <= right:
            mid = (left+right)//2
            if guess(mid) == 0:
                return mid
            elif guess(mid) == 1:
                left = mid + 1
            elif guess(mid) == -1:
                right = mid -1

bit operation:

only three operation: &(and), |(or), ^(xor)
a:101 -5
b:110 -6

a&b = 100
a|b = 111
a^b = 011     if two things are different, it is 1, otherwise 0.



while usage
38

class Solution(object):
    def countAndSay(self, n):
        """
        :type n: int
        :rtype: str
        """
        string = '1'
        for i in range(n-1):
            string = self.getNext(string)
        return string
    
    def getNext(self, string):
        i = 0
        nextStr = ""
        while i < len(string):          
            cnt = 1
            while i < len(string) -1 and string[i] == string[i+1]:   # the order of these two conditions can not change.
                cnt += 1
                i += 1
            nextStr += str(cnt) + string[i]
            i +=1
        return nextStr  
        
