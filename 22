class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        
        result = []
        self.generateParenthesisRecu(result, "", 0, 0, n)
        return result
    
    def generateParenthesisRecu(self, result, current, left, right, n):
        if right == n:
            result.append(current)
        if left < n:
            self.generateParenthesisRecu(result, current + "(", left + 1, right, n)
        if left > right:
            self.generateParenthesisRecu(result, current + ")", left, right + 1, n)



class Solution {
public:
    vector<string> generateParenthesis(int n) {
        ret = {};
        search(n, 0, "");
        return ret;
        
    }
private:
    vector<string> ret;
    void search(int n, int offset, string prefix){
        if (n==0 && offset ==0)
            ret.push_back(prefix);
        else if (n<0 || offset < 0){
            return;
        }
        else{
            search(n-1, offset+1, prefix+"(");
            search(n, offset -1, prefix+")");
        }
    }
};


