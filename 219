class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        lookup = {}
        for i, num in enumerate(nums):
            if num in lookup:
                if i - lookup[num] <= k:
                    return True
            lookup[num] = i
        return False
    
    
   
class Solution:
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        dic = {}
        for i in range(len(nums)):
            if nums[i] in dic and i - dic[nums[i]] <= k:
                return True
            dic[nums[i]] = i
        return False
        
        
        
   class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        map<int, int> mp;
        for(int i = 0; i < nums.size(); ++i){
            if ((mp.find(nums[i]) != mp.end()) && (i - mp[nums[i]] <= k)){
                return true;
            }else{
                mp[nums[i]] = i;
            }
        }
        return false;
    }
};


