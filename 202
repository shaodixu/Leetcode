class Solution(object):
    def isHappy(self, n):
        """
        :type n: int
        :rtype: bool
        """
        visited = set([])
        while(n not in visited):
            visited.add(n)
            _sum = 0
            
            while(n):
                _sum += (n % 10)**2
                n /= 10
            if(_sum == 1):
                return True
            n = _sum
        return False
        



class Solution(object):
    def isHappy(self, n):
        """
        :type n: int
        :rtype: bool
        """
        visited = {}
        while n not in visited:
            visited[n] = 1
            total = n
            k = 0
            while total:
                
                k += (total%10)**2
        
                total = total//10
            n = k
            if n == 1:
                return True
        
        return False
        
        
        
   
   
   class Solution {
public:
    bool isHappy(int n) {
        unordered_set<int> visited;
        while(n != 1 && !visited.count(n)){
            visited.emplace(n);
            n = nextNumber(n);
        }
        return n == 1;
    }
    
    
    int nextNumber(int n){
        int sum = 0;
        while (n) {
            sum += pow(n % 10, 2);
            n /= 10;
        }
        return sum;
    }
};
