class Solution(object):
    def maxEnvelopes(self, envelopes):
        """
        :type envelopes: List[List[int]]
        :rtype: int
        """
        # similar to 300
#         if envelopes == None or len(envelopes) == 0:return 0
#         nums = sorted(envelopes, 
#                       cmp = lambda x,y: x[0] - y[0] if x[0] != y[0] else y[1] - x[1])
#         dp = [None]*len(envelopes)
#         res = 0
#         for envelope in envelopes:
#             i = self.binarySearch(dp, 0, res, envelope[1])
#             dp[i] = envelope[1]
#             if i == res:
#                 res += 1
#         return res
    
#     def binarySearch(self, dp, start, end, target):
#         while start + 1< end:
#             mid = start + (end-start)/2
#             if dp[mid] == target:
#                 return mid
#             elif dp[mid] < target:
#                 start = mid
#             else:
#                 end = mid
#         if dp[start] >= target:return start
#         return end
        nums = sorted(envelopes, 
                      cmp = lambda x,y: x[0] - y[0] if x[0] != y[0] else y[1] - x[1])
        size = len(nums)
        dp = []
        for x in range(size):
            low, high = 0, len(dp) - 1
            while low <= high:
                mid = (low + high) / 2
                if dp[mid][1] < nums[x][1]:
                    low = mid + 1
                else:
                    high = mid - 1
            if low < len(dp):
                dp[low] = nums[x]
            else:
                dp.append(nums[x])
        return len(dp)
