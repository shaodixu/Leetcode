class NumMatrix(object):
    
    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        if not matrix or not matrix[0]:
            return
        r = len(matrix)
        c = len(matrix[0])
        self.m = [ [ 0 for _ in xrange(c + 1) ] for _ in xrange(r + 1)]
        for i in xrange(1, r + 1):
            for j in xrange(1, c + 1):
                self.m[i][j] = self.m[i - 1][j] + self.m[i][j - 1] - self.m[i - 1][j - 1] + matrix[i - 1][j - 1]

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        return self.m[row2 + 1][col2 + 1] - self.m[row2 + 1][col1] - self.m[row1][col2 + 1] + self.m[row1][col1]
        
        


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
