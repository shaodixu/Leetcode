class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        a = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
        res = 0
        i = 0
        while i < len(s):
            if i >0 and a[s[i]]>a[s[i-1]]:
                res += a[s[i]]-2*a[s[i-1]]
            else:
                res += a[s[i]]
            i += 1
        return res



class Solution {
public:
    int romanToInt(string s) {
        unordered_map<char, int> numeral_map = {{'I',    1}, {'V',   5}, {'X',  10},
                                                {'L',   50}, {'C', 100}, {'D', 500},
                                                {'M', 1000}};
        int decimal = 0;
        for (int i = 0; i < s.length(); ++i){
            if (i > 0 && numeral_map[s[i]] > numeral_map[s[i-1]]){
                decimal += numeral_map[s[i]] - 2*numeral_map[s[i-1]];
                
            }else{
                decimal += numeral_map[s[i]];
            }
        }
        return decimal;
        
    }
};





