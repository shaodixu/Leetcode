class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) == 0:
            return 0

        nums = [0] * (len(s) + 1)
        if s[0] != '0':
            nums[0] = 1
            nums[1] = 1

        for i in range(1, len(s)):
            if s[i] == '0':
                if s[i-1] != '1' and s[i-1] != '2':
                    return 0
                nums[i+1] = nums[i-1]
            elif s[i-1] == '1':
                nums[i+1] = nums[i-1]+nums[i]
            elif s[i-1] == '2' and int(s[i]) < 7:
                nums[i+1] = nums[i-1]+nums[i]
            else:
                nums[i+1] = nums[i]

        return nums[-1]




class Solution:
    # @param s, a string
    # @return an integer
    def numDecodings(self, s):
        #dp[i] = dp[i-1] if s[i] != "0"
        #       +dp[i-2] if "09" < s[i-1:i+1] < "27"
        if s == "": return 0
        dp = [0 for x in range(len(s)+1)]
        dp[0] = 1
        for i in range(1, len(s)+1):
            if s[i-1] != "0":
                dp[i] += dp[i-1]
            if i != 1 and s[i-2:i] < "27" and s[i-2:i] > "09":  #"01"ways = 0
                dp[i] += dp[i-2]
        return dp[len(s)]
