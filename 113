# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    # @param root, a tree node
    # @param sum, an integer
    # @return a list of lists of integers
    def pathSum(self, root, sum):
        return self.pathSumRecu([], [], root, sum)

    
    def pathSumRecu(self, result, cur, root, sum):
        if root is None:
            return result
        
        if root.left is None and root.right is None and root.val == sum:
            result.append(cur + [root.val])
            return result
        
        cur.append(root.val)
        self.pathSumRecu(result, cur, root.left, sum - root.val)
        self.pathSumRecu(result, cur,root.right, sum - root.val)
        cur.pop()
        return result



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        self.result = []
        temp = []
        self.helper(root, sum, temp)
        return self.result 
    
    def helper(self, root, sum, temp):
        if root == None:
            return 
        if root.left == None and root.right == None and root.val == sum:
            self.result.append(temp+[root.val])
        temp.append(root.val)
        self.helper(root.left, sum - root.val, temp)
        self.helper(root.right, sum - root.val, temp)
        temp.pop()



# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: List[List[int]]
        """
        res = []
        
        if root == None:
            return res
        if root.left == None and root.right == None and root.val == sum:
            res.append([root.val])
            return res
        
        
        leftS = self.pathSum(root.left, sum - root.val)
        rightS = self.pathSum(root.right, sum - root.val)
        
        for i in range(len(leftS)):
            res.append([root.val] + leftS[i])
        for i in range(len(rightS)):
            res.append([root.val] + rightS[i])
            
        return res
