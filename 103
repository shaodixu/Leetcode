# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution(object):
     def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """ 
        res = []
        def preorder(root, level, res):
            if root:
                if len(res) < level + 1: res.append([])
                if level % 2 == 0: 
                    res[level].append(root.val)
                else:
                    res[level].insert(0,root.val)
                preorder(root.left, level + 1, res)
                preorder(root.right, level + 1, res)
    
        
        preorder(root, 0, res)       
        return res


'''

class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        if root is None:
            return []
        result, current, level = [], [root], 1
        while current:
            next_level, vals = [], []
            for node in current:
                vals.append(node.val)
                if node.left:
                    next_level.append(node.left)
                if node.right:
                    next_level.append(node.right)
            if level % 2:
                result.append(vals)
            else:
                result.append(vals[::-1])
            level += 1
            current = next_level
        return result
        
'''





# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        
        self.res = []
        self.helper(root, 0)
        return self.res
    
    def helper(self, root, level):
        if not root:
            return None
        if len(self.res) < level + 1:
            self.res.append([])
        if level%2 == 0:
            self.res[level].append(root.val)
        else:
            self.res[level].insert(0, root.val)
        self.helper(root.left, level + 1)
        self.helper(root.right, level + 1)
