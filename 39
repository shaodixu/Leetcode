class Solution(object):
    def combinationSum(self, nums, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        self.res = []
        def dfs(nums, temp, remainder, index):
            if remainder == 0:
                self.res.append(temp[:])
                return 
            if remainder < 0:
                return 
            for i in range(index, len(nums)):
                temp.append(nums[i])
                dfs(nums, temp, remainder-nums[i], i)
                temp.pop()
        dfs(nums, [], target, 0)
        return self.res




class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> cur_res;
        solve(candidates, 0, target, cur_res, res);
        return res;
    }

private:
    void solve(const vector<int> &candidates, int index, int target, vector<int>& cur_res, vector<vector<int>>&res){
        if(target == 0){
            res.push_back(cur_res);
            return;
        }
        for(int i = index; i < candidates.size(); i++){
            if(target >= candidates[i]){
                cur_res.push_back(candidates[i]);
                solve(candidates, i, target - candidates[i], cur_res, res);
                cur_res.pop_back();
            }
        }
    }
};
