# map tao map
#solution 1

class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = {}

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        p = self.root
        for c in word:
            if c not in p:
                p[c] = {}
            p = p[c]
        p['#'] = True
    

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        node = self.find(word)
        return node is not None and '#' in node

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        return self.find(prefix) != None
    
    def find(self, prefix):
        p = self.root
        for c in prefix:
            if c not in p:return None
            p = p[c]
        return p



# solution 2 is slower than solution1

# class TrieNode(object):
#     def __init__(self):
#         self.is_word = False
#         self.children = [None]*26
            
# class Trie(object):
#     def __init__(self):
#         self.root = TrieNode()
        
#     def insert(self, word):
#         p = self.root
#         for c in word:
#             index = ord(c)-ord('a')
#             if not p.children[index]:
#                 p.children[index] = TrieNode()
#             p = p.children[index]
#         p.is_word = True
    
#     def search(self, word):
#         node = self.find(word)
#         return node is not None and node.is_word
    
#     def startsWith(self, prefix):
#         return self.find(prefix) is not None
    
#     def find(self,prefix):
#         p = self.root
#         for c in prefix:
#             index = ord(c) - ord('a')
#             if not p.children[index]: return None
#             p = p.children[index]
#         return p
    
    
# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
