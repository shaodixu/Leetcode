class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
      
        if not grid: return 0
        m = len(grid)
        n = len(grid[0])
    
        count = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    count += 1
                    self.dfs(grid, i, j, m, n)

        # for row in grid:
            # print(row)
        return count    
    
    def dfs(self, grid, i, j, m, n):
        if i < 0 or j < 0 or i >=m or j >= n or grid[i][j] != '1':
            return
    
        grid[i][j] = '#'
        self.dfs(grid, i, j+1, m, n)
        self.dfs(grid, i, j-1, m, n)
        self.dfs(grid, i-1, j, m, n)
        self.dfs(grid, i+1, j, m, n)
      





class Solution {
private:
    int m, n;
    bool inArea(int x, int y){
        return (x>=0&&x<m&& y >=0 && y <n);
        
    }
    vector<vector<bool>> visited;
    int d[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    void dfs(vector<vector<char>>& grid, int startx, int starty){
        visited[startx][starty] = true;
        for(int i = 0; i < 4; i++){
            int newx = startx + d[i][0];
            int newy = starty + d[i][1];
            if(inArea(newx, newy)&&!visited[newx][newy]&& grid[newx][newy] == '1')
                
                dfs(grid, newx, newy);
        }
        return;
        
        
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        
        int res = 0;
        m = grid.size();
        if(m == 0)
            return 0;
        n = grid[0].size();
        if(n==0)
            return 0;
        visited = vector<vector<bool>>(m, vector<bool>(n, false));
        for(int i = 0; i < m; i++){
            for( int j = 0; j < n; j++)
                if(grid[i][j] == '1'&&!visited[i][j]){
                    dfs(grid, i, j);
                    res++;
                    
                }
                    
        }
        
        return res;
        
        
    }
};
