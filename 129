# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
       
        return self.helper(root, 0)
    
    def helper(self, root, num):
        if not root:
            return 0
        if not root.left and not root.right:
            return num*10 + root.val
        
        return self.helper(root.left, num*10 + root.val) + self.helper(root.right, num*10 + root.val)





# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        a = 0
        res = self.helper(root)
        for item in res:
            a += int(item)
        return a
        
    
    
    def helper(self, root):
        res = []
        if root == None:
            return res
        if root.left == None and root.right == None:
            res.append(str(root.val))
            return res
        
        leftS = self.helper(root.left)
        rightS = self.helper(root.right)
        
        for i in range(len(leftS)):
            res.append(str(root.val) + leftS[i])
        for i in range(len(rightS)):
            res.append(str(root.val) + rightS[i])
        
        return res
        
            
        
        
   
