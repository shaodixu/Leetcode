# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        count = []
        self.inorder(root, count)
        return count[k-1]
        
    def inorder(self, node, count):
        if not node:
            return
        
        self.inorder(node.left, count)
        count.append(node.val)
        self.inorder(node.right, count)





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
int val = 0;
int x = 0;
public:
    int kthSmallest(TreeNode* root, int k) {
        inorder(root, k);
        return x;
        
    }
public:
    void inorder(TreeNode* root, int k){
        if(!root)
            return;
        inorder(root->left, k);
        val++;
        if(val == k){
            x = root->val;
        }
        inorder(root->right, k);
    }
};


