class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        
        #return list(set(nums1) & set(nums2))
        
        res = []
        for i in nums1:
            if i not in res and i in nums2:
                res.append(i)
        return res





class Solution:
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        return list(set(nums1).intersection(set(nums2)))
        
        # return list(set([i for i in nums1 if i in nums2]))
        
        
#         a = []
#         for i in nums1:
#             if i in nums2:
#                 a.append(i)
        
#         return list(set(a))

        # return list(set(nums1)&set(nums2))
    



class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        set<int> record;
        for(int i = 0; i < nums1.size(); i++)
            record.insert(nums1[i]);
        
        set<int> resultSet;
        for(int i = 0; i < nums2.size(); i++)
            if(record.find(nums2[i] )!= record.end())
                resultSet.insert(nums2[i]);
        
        vector<int> resultVector;
        for(set<int>::iterator iter = resultSet.begin();iter != resultSet.end(); iter++)
            resultVector.push_back(*iter);
        
        return resultVector;
        
    }
};
