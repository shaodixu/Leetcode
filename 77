class Solution(object):
    def combine(self, n, k):

       """

       :type n: int

       :type k: int

       :rtype: List[List[int]]

       """

       ans = []

       stack = []

       x = 1

       while True:

           len_stack = len(stack)

           if len_stack == k:

                ans.append(stack[:])

           if len_stack == k or x > n - k + len_stack + 1:

                if not stack:

                    return ans

                x = stack.pop() + 1

           else:

                stack.append(x)

                x += 1
        
  
  
  class Solution:
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        self.res = []
        def dfs(n, temp, k, index):
            if k == 0:
                self.res.append(temp[:])
                return
            for i in range(index, n):
                temp.append(i + 1)
                dfs(n, temp, k-1, i+1)
                temp.pop()
        dfs(n, [], k, 0)
        return self.res

 
 
class Solution {
private:
    vector<vector<int>> res;
    void generateCombinations(int n, int k, int start, vector<int> &c){
        if(c.size() == k){
            res.push_back(c);
            return;
        }
        for(int i = start; i<= n; i++){
            c.push_back(i);
            generateCombinations(n, k, i+1, c);
            c.pop_back();
        }
        return;
    }
public:
    vector<vector<int>> combine(int n, int k) {
        res.clear();
        if( n <= 0 || k <= 0 || k > n )
            return res;

        vector<int> c;
        generateCombinations(n, k, 1, c);

        return res;
        
    }
};
