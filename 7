class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        x = int(str(x)[::-1]) if x >= 0 else -int(str(-x)[::-1])
        return x if abs(x)<0x7FFFFFFF else 0


class Solution {
public:
    int reverse(int x) {
        int result = 0;
        while (x) {
            auto prev = result;
            result *= 10;
            result += x%10;
            if (result/10 != prev){
                result = 0;
                break;
            }
            x /= 10;
        }
        return result;
    }
};




1. Remove leading spaces
2. Confirm sign
3. Update value to long long and exit once greater than INT_MAX 

class Solution {
public:
    int myAtoi(string str) 
    {
        long long res=0;
        int i=0;
        while(i<str.size()&&str[i]==' ')
            i++;
        bool neg=false;
        if(str[i]=='-')
            neg=true,i++;
        else if(str[i]=='+')
            i++;
        while(i<str.size()&&isdigit(str[i]))
        {
            res=res*10+str[i++]-'0';
            if(res>INT_MAX)
                return neg?INT_MIN:INT_MAX;
        }
        return neg?-res:res;
    }
};


class Solution {
public:
    int reverse(int x) {
        if(x== 0){
            return 0;
        }
        int sign = x>0?1:-1;
        long long num = abs(x);
        long long reverseNum = 0;
        while(num){
            reverseNum = reverseNum*10 + num%10;
            num = num/10;
        }
        reverseNum *= sign;
        if(reverseNum > INT_MAX || reverseNum < INT_MIN)
            return 0;
        
        return reverseNum;
        
        
    }
};
