class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        self.res = []
        self.dfs(s, [])
        return self.res
    def dfs(self, s, temp):
        if not s:
            self.res.append(temp[:])
            return 
        for i in range(1, len(s)+1):
            if self.isPali(s[:i]):
                temp.append(s[:i])
                self.dfs(s[i:], temp)
                temp.pop()
    def isPali(self, s):
        return s==s[::-1]




class Solution:
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        self.res = []
        self.dfs(s, [])
        return self.res
    def dfs(self, s, temp):
        if not s:
            self.res.append(temp[:])
            return 
        for i in range(1, len(s) + 1):
            if s[:i] == s[:i][::-1]:
                temp.append(s[:i])
                self.dfs(s[i:], temp)
                temp.pop()
    


class Solution:
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        res = []
        self.dfs(s, [], res)
        return res
    
    def isPal(self,s):
        return s == s[::-1]
    
    def dfs(self, s, path, res):
        if not s:
            res.append(path)
            return 
        for i in range(1, len(s) + 1):
            if self.isPal(s[:i]):
                self.dfs(s[i:], path + [s[:i]], res)
        
        
        
        
