# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        dummy = ListNode(0)
        dummy.next = head
        current = dummy
        while current.next and current.next.next:
            self.swap(current)
            current = current.next.next
        return dummy.next
    def swap(self, pre):
        dummy = pre.next
        pre.next = dummy.next
        dummy.next = dummy.next.next
        pre.next.next = dummy



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode *cur = head;
        while(cur && cur->next){
            int tmp = cur->val;
            cur->val = cur->next->val;
            cur->next->val = tmp;
            
            ListNode *curNextNext = cur->next->next;
            cur = curNextNext;
        }
        return head;
        
    }
};



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* dummyHead = new ListNode(0);
        dummyHead->next = head;
        ListNode* p = dummyHead;
        
        while(p->next && p->next->next){
            ListNode* node1 = p->next;
            ListNode* node2 = node1->next;
            ListNode* next = node2->next;
            
            node2->next = node1;
            p->next = node2;
            node1->next = next;
            
            p = node1;
        }
        ListNode* retNode = dummyHead->next;
        delete dummyHead;
        return retNode;
        
    }
};
