# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root is None:
            return True
        return self.helper(root, None, None)
    def helper(self, root, min, max):
        if root is None:
            return True
        if min != None and root.val <= min:
            return False
        if max != None and root.val >= max:
            return False
        return self.helper(root.left, min, root.val) and self.helper(root.right, root.val, max)



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return helper(root, LLONG_MIN, LLONG_MAX);
        
    }
public:
    bool helper(TreeNode* root, long min, long max){
        if(root == NULL)
            return true;
        if(root->val >= max || root->val <= min)
            return false;
        
        return helper(root->left, min, root->val)&&helper(root->right, root->val, max);
    }
};
