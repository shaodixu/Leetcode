#DP
class Solution:
    # @param {string} s
    # @return {integer}
    def minCut(self, s):
        if not s:
            return 0
            
        dp = [2147483647] * (len(s) + 1)
        dp[0] = -1
        
        for i in range(1, len(s) + 1):
            for j in range(i):
                tmp = s[j:i]
                if tmp == tmp[::-1]:
                    dp[i] = min(dp[i], dp[j] + 1)
        return dp[-1]


'''

class Solution:
    # @param s, a string
    # @return an integer
    def minCut(self, s):
        n = len(s)
        dp = [0 for __ in range(n)]
        isPal = [[False for __ in range(n)] for __ in range(n)]
        for i in range(n):
            m = i
            for j in range(i + 1):
                if s[j] == s[i] and (i- j < 2 or isPal[j + 1][i - 1]):
                    isPal[j][i] = True
                    m = 0 if j == 0 else min(m, dp[j - 1] + 1)
            dp[i] = m
        return dp[-1]
        
        '''
