class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = []
        lookup = {"(":")", "[":"]", "{":"}"}
        for a in s:
            if a in lookup:
                stack.append(a)
            elif len(stack) == 0 or lookup[stack.pop()] != a:
                return False
        return len(stack) == 0



class Solution {
public:
    bool isValid(string s) {
        unordered_map<char, char> dic = {{'(', ')'}, {'[', ']'}, {'{', '}'}};
        string mem = "";
        for (int i= 0; i < s.size(); i++){
            if (s[i] == '(' || s[i] == '[' || s[i] == '{'){
                mem += s[i];
            }else{
                if (s[i] != dic[mem.back()])
                    return false;
                else
                    mem.pop_back();
            }
        }
        return mem.empty();
    }
};


class Solution {
public:
    bool isValid(string s) {
        stack<char> stack;
        for(int i = 0; i < s.size(); i++){
            if (s[i] == '(' || s[i] == '[' || s[i] == '{')
                stack.push(s[i]);
            else{
                if (stack.size() == 0)
                    return false;
                
                char c = stack.top();
                stack.pop();
                
                char match;
                if(s[i] == ')')
                    match = '(';
                else if(s[i] == ']')
                    match = '[';
                else{
                    match = '{';  
                }
                if (c != match)
                    return false;
                
            }
        }
        if (stack.size() != 0)
            return false;
        return true;
            
        
    }
};
