class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        
        
        
        for i in xrange(len(board)):
            for j in xrange(len(board[0])):
                if self.existRecu(board, word, 0, i, j):
                    return True
        
        return False
    
    def existRecu(self, board, word, cur, i, j):
        if cur == len(word):
            return True
        
        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[cur]:
            return False
        
        c = board[i][j]
        board[i][j] = "#"
        result = self.existRecu(board, word, cur + 1, i + 1, j) or\
                 self.existRecu(board, word, cur + 1, i - 1, j) or\
                 self.existRecu(board, word, cur + 1, i, j + 1) or\
                 self.existRecu(board, word, cur + 1, i, j - 1)         
        board[i][j] = c
        
        return result




class Solution {
private:
    int d[4][2] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    int m, n;
    vector<vector<bool>> visited;
    
    bool inArea(int x, int y){
        return (x>= 0 && x < m && y >= 0 && y < n);
    }
    
    bool searchWord(vector<vector<char>>& board, string word, int index, int startx, int starty){
        if(index == word.size() - 1)
            return word[index] == board[startx][starty];
        
        if(word[index] == board[startx][starty]){
            visited[startx][starty] = true;
            for(int i = 0; i < 4; i++){
                int newx = startx + d[i][0];
                int newy = starty + d[i][1];
                if(inArea(newx, newy)&& !visited[newx][newy] && searchWord(board, word, index+1, newx, newy))
                    return true;
             
        }
            visited[startx][starty] = false; 
        }
       
        
        return false;
        
    }
    
public:
    bool exist(vector<vector<char>>& board, string word) {
        m = board.size();
        n = board[0].size();
        visited = vector<vector<bool>>(m, vector<bool>(n, false));
        for(int i = 0; i < board.size(); i++)
            for(int j = 0; j < board[0].size(); j++){
                if(searchWord(board, word, 0, i, j))
                    return true;
            }
        return false;
        
    }
};
