# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        if head == None or head.next == None:
            return head
        
        middle = self.getMiddle(head)
        _next = middle.next
        middle.next = None
        
        #sorted_l1 = self.sortList(head)
       # sorted_l2 = self.sortList(_next)
        
        return self.mergeTwoLists(self.sortList(head), self.sortList(_next))
    
    def getMiddle(self, head):
        slow = head
        fast = head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        return slow
           
    def mergeTwoLists(self, l1, l2):
        dummy = ListNode(0)
        
        cur = dummy
        while l1 != None and l2 != None:
            if l1.val <= l2.val:
                cur.next,  l1 = l1, l1.next
            else:
                cur.next, l2 = l2, l2.next
            cur = cur.next
                
        if l1 != None:
            cur.next = l1
        if l2 != None:
            cur.next = l2
            
        return dummy.next
