# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        dummy = ListNode(0)
        dummy.next = head
        p1 = p2 = dummy
        for i in range(n):
            p1 = p1.next
        while p1.next:
            p1 = p1.next
            p2 = p2.next
        p2.next = p2.next.next
        return dummy.next



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (!head)
            return nullptr;
        ListNode new_head(-1);
        new_head.next = head;
        ListNode *slow = &new_head, *fast = &new_head;
        for (int i = 0; i < n; i++)
            fast = fast->next;
        while (fast->next){
            fast = fast->next;
            slow = slow->next;
        }
        ListNode *to_be_deleted = slow->next;
        slow->next = slow->next->next;
        delete to_be_deleted;
        return new_head.next;
    }
};



