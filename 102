# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """

        res = []
        
        def preorder(root,level):
            if not root:return 
            if len(res)<level+1: res.append([])
            res[level].append(root.val)
            preorder(root.left,level+1)
            preorder(root.right,level+1)
        preorder(root,0)
        return res
    
    
'''    

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        if root is None:
            return res
        
        q = []
        q.append(root)
        
        while len(q) != 0:
            new_q = []
            res.append([node.val for node in q])
            for node in q:
                
                if node.left:
                    new_q.append(node.left)
                if node.right:
                    new_q.append(node.right)
            q = new_q
        return res   
        
        
'''
#bfs
from collections import deque
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if root == None:
            return []
        q = deque()
        result = []
        q.append(root)
        
        while q:
            level = []
            size = len(q)
            for _ in range(size):
                a = q.popleft()
                level.append(a.val)
                
                if a.left:
                    q.append(a.left)
                if a.right:
                    q.append(a.right)
            result.append(level)
        return result
            
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(root == NULL)
            return res;
        queue<pair<TreeNode*, int>> q;
        q.push(make_pair(root, 0));
        
        while(!q.empty()){
            TreeNode* node = q.front().first;
            int level = q.front().second;
            q.pop();
            
            if(level == res.size()){
                res.push_back(vector<int>());
                
            }
            res[level].push_back(node->val);
            
            if (node->left)
                q.push(make_pair(node->left, level+1));
            if(node->right)
                q.push(make_pair(node->right, level+1));
        }
        return res;
        
    }
};
