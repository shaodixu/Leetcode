# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if not head:
            return True
        
        slow, fast = head, head
        while(fast.next != None and fast.next.next != None):
            slow = slow.next
            fast = fast.next.next
        middle = slow.next
        
        a = self.reverse(middle)
        
        while a:
            if a.val != head.val:
                return False
            a = a.next
            head = head.next
        return True
        
    def reverse(self, head):
        pre = None
        while head:
            temp = head.next
            head.next = pre
            pre = head
            head = temp
        return pre
        

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        
        mid = self.find_mid(head)
        a = self.reverse(mid)
        
        while head and a:
            if head.val != a.val:
                return False
            head = head.next
            a = a.next
        return True
    
    def find_mid(self, head):
        slow = head
        fast = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        return slow
        
    
    def reverse(self, head):
        pre = None
        while head:
            temp = head.next
            head.next = pre
            pre = head
            head = temp
        return pre
