# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy = ListNode(0)
        current = dummy
        carry = 0
        
        
        while l1 or l2:
            val = carry
            if l1:     
                val += l1.val
                
                l1 = l1.next
            
            if l2:
                val += l2.val
                
                l2 = l2.next
            carry = val/10
            val = val%10
            
            #carry, val = divmod(val, 10)
            current.next = ListNode(val)
            current = current.next
                
        if carry == 1:
            current.next = ListNode(1)
        return dummy.next
        
        
        
        
        
  # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        carry = 0
        b = 0
        
        dummy = ListNode(0)
        current = dummy
        while l1 or l2:
            val = 0
            if l1:
                val += l1.val
                l1 = l1.next
            if l2:
                val += l2.val
                l2 = l2.next
            
            b = val + carry
            
            true_val = b%10
            carry = b//10
            
            current.next = ListNode(true_val)
            current = current.next
        if carry == 1:
            current.next = ListNode(1)
        return dummy.next



class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *p1 = l1;
        ListNode *p2 = l2;
        ListNode *res;
        ListNode *curr;
        bool first = true;
        int carry = 0;
        
        while(l1 != NULL || l2 != NULL || carry != 0) {
            int num = 0;
            if (l1 != NULL) {
                num += l1->val;
                l1 = l1->next;
            }
            if (l2 != NULL) {
                num += l2->val;
                l2 = l2->next;
            }
            num += carry;
            carry = num/10;
            
            ListNode *temp = new ListNode(num%10);
            if (first) {
                res = temp;
                curr = temp;
                first = false;
            } else {
                curr->next = temp;
                curr = curr->next;
            }
        }
        return res;
    }
};




class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        ListNode *p1 = l1, *p2 = l2;
        ListNode *dummyHead = new ListNode(-1);
        ListNode* cur = dummyHead;
        int carried = 0;
        while(p1 || p2 ){
            int a = p1 ? p1->val : 0;
            int b = p2 ? p2->val : 0;
            cur->next = new ListNode((a + b + carried) % 10);
            carried = (a + b + carried) / 10;

            cur = cur->next;
            p1 = p1 ? p1->next : NULL;
            p2 = p2 ? p2->next : NULL;
        }

        cur->next = carried ? new ListNode(1) : NULL;
        ListNode* ret = dummyHead->next;
        delete dummyHead;
        return ret;
    }
};
