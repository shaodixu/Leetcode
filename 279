class Solution(object): 
    def numSquares(self, n): 
        squares = [i ** 2 for i in range(2, int(n ** 0.5) + 1)] 
        dp = range(n + 1) 
        dp[0] = 0 
        for i in squares: 
            for j in range(i, n + 1): 
                dp[j] = min(dp[j - i] + 1, dp[j]) 
        return dp[-1]




            
        
        
class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = [float('inf')] * (n+1)
        for i in range(1, int(n**0.5)+1):
            dp[i**2] = 1

        for i in range(1, n+1):
            for k in range(1, int(i**0.5)+1):
                dp[i] = min(dp[i], dp[i-k**2]+1)

        return dp[n]





class Solution {
public:
    int numSquares(int n) {
        vector<int>memo(n+1, INT_MAX);
        memo[0] = 0;
        
        for(int i =1; i <= n; i++){
            for(int j = 1; j*j<= i; j++){
                memo[i] = min(memo[i], 1+memo[i-j*j] );
            }
        }
        return memo[n];
        
    }
};
